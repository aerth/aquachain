// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package config

import (
	"time"

	"gitlab.com/aquachain/aquachain/aqua/downloader"
	"gitlab.com/aquachain/aquachain/aqua/gasprice"
	"gitlab.com/aquachain/aquachain/common/alerts"
	"gitlab.com/aquachain/aquachain/common/hexutil"
	"gitlab.com/aquachain/aquachain/consensus/aquahash/ethashdag"
	"gitlab.com/aquachain/aquachain/core"
)

var _ = (*AquaConfigMarshaling)(nil)

// MarshalTOML marshals as TOML.
func (a Aquaconfig) MarshalTOML() (interface{}, error) {
	type Aquaconfig struct {
		Genesis                 *core.Genesis `json:",omitempty"`
		ChainId                 uint64
		SyncMode                downloader.SyncMode
		NoPruning               bool `json:"NoPruning"`
		SkipBcVersionCheck      bool `json:"-"`
		DatabaseHandles         int  `json:"-"`
		DatabaseCache           int
		TrieCache               int
		TrieTimeout             time.Duration
		Aquabase                string        `json:",omitempty"`
		MinerThreads            int           `json:",omitempty"`
		ExtraData               hexutil.Bytes `json:",omitempty"`
		GasPrice                uint64
		Aquahash                *ethashdag.Config
		TxPool                  core.TxPoolConfig
		GPO                     gasprice.Config
		EnablePreimageRecording bool
		JavascriptDirectory     string             `json:"-"`
		Alerts                  alerts.AlertConfig `json:",omitempty"`
	}
	var enc Aquaconfig
	enc.Genesis = a.Genesis
	enc.ChainId = a.ChainId
	enc.SyncMode = a.SyncMode
	enc.NoPruning = a.NoPruning
	enc.SkipBcVersionCheck = a.SkipBcVersionCheck
	enc.DatabaseHandles = a.DatabaseHandles
	enc.DatabaseCache = a.DatabaseCache
	enc.TrieCache = a.TrieCache
	enc.TrieTimeout = a.TrieTimeout
	enc.Aquabase = a.Aquabase
	enc.MinerThreads = a.MinerThreads
	enc.ExtraData = a.ExtraData
	enc.GasPrice = a.GasPrice
	enc.Aquahash = a.Aquahash
	enc.TxPool = a.TxPool
	enc.GPO = a.GPO
	enc.EnablePreimageRecording = a.EnablePreimageRecording
	enc.JavascriptDirectory = a.JavascriptDirectory
	enc.Alerts = a.Alerts
	return &enc, nil
}

// UnmarshalTOML unmarshals from TOML.
func (a *Aquaconfig) UnmarshalTOML(unmarshal func(interface{}) error) error {
	type Aquaconfig struct {
		Genesis                 *core.Genesis `json:",omitempty"`
		ChainId                 *uint64
		SyncMode                *downloader.SyncMode
		NoPruning               *bool `json:"NoPruning"`
		SkipBcVersionCheck      *bool `json:"-"`
		DatabaseHandles         *int  `json:"-"`
		DatabaseCache           *int
		TrieCache               *int
		TrieTimeout             *time.Duration
		Aquabase                *string        `json:",omitempty"`
		MinerThreads            *int           `json:",omitempty"`
		ExtraData               *hexutil.Bytes `json:",omitempty"`
		GasPrice                *uint64
		Aquahash                *ethashdag.Config
		TxPool                  *core.TxPoolConfig
		GPO                     *gasprice.Config
		EnablePreimageRecording *bool
		JavascriptDirectory     *string             `json:"-"`
		Alerts                  *alerts.AlertConfig `json:",omitempty"`
	}
	var dec Aquaconfig
	if err := unmarshal(&dec); err != nil {
		return err
	}
	if dec.Genesis != nil {
		a.Genesis = dec.Genesis
	}
	if dec.ChainId != nil {
		a.ChainId = *dec.ChainId
	}
	if dec.SyncMode != nil {
		a.SyncMode = *dec.SyncMode
	}
	if dec.NoPruning != nil {
		a.NoPruning = *dec.NoPruning
	}
	if dec.SkipBcVersionCheck != nil {
		a.SkipBcVersionCheck = *dec.SkipBcVersionCheck
	}
	if dec.DatabaseHandles != nil {
		a.DatabaseHandles = *dec.DatabaseHandles
	}
	if dec.DatabaseCache != nil {
		a.DatabaseCache = *dec.DatabaseCache
	}
	if dec.TrieCache != nil {
		a.TrieCache = *dec.TrieCache
	}
	if dec.TrieTimeout != nil {
		a.TrieTimeout = *dec.TrieTimeout
	}
	if dec.Aquabase != nil {
		a.Aquabase = *dec.Aquabase
	}
	if dec.MinerThreads != nil {
		a.MinerThreads = *dec.MinerThreads
	}
	if dec.ExtraData != nil {
		a.ExtraData = *dec.ExtraData
	}
	if dec.GasPrice != nil {
		a.GasPrice = *dec.GasPrice
	}
	if dec.Aquahash != nil {
		a.Aquahash = dec.Aquahash
	}
	if dec.TxPool != nil {
		a.TxPool = *dec.TxPool
	}
	if dec.GPO != nil {
		a.GPO = *dec.GPO
	}
	if dec.EnablePreimageRecording != nil {
		a.EnablePreimageRecording = *dec.EnablePreimageRecording
	}
	if dec.JavascriptDirectory != nil {
		a.JavascriptDirectory = *dec.JavascriptDirectory
	}
	if dec.Alerts != nil {
		a.Alerts = *dec.Alerts
	}
	return nil
}
