#!/bin/bash
set -e
set -x # for testing
this_script_dir=$(dirname $(realpath $0))
PREFIX=${PREFIX:-${HOME}/.local}
echo "Installing to prefix: $PREFIX -> $PREFIX/bin"
mkdir -p ${PREFIX}/bin || (echo "Failed to create ${PREFIX}/bin" && exit 1)
if [ "$PREFIX" != "/usr/local" ] && [[ ":$PATH:" != *":$PREFIX/bin:"* ]]; then
    echo "Please add ${PREFIX}/bin to your PATH or modify this script ($0) to install to a different location"
    echo "example: export PATH=\$PATH:${PREFIX}/bin"
    exit 1
fi
export GOBIN=${PREFIX}/bin

solc_bin_path=${PREFIX}/bin/solc-static-linux
SOLIDITY_VERSION=${SOLIDITY_VERSION-v0.8.28} # can bump this version
solidity_url=https://github.com/ethereum/solidity/releases/download/${SOLIDITY_VERSION}/solc-static-linux
install_go_tools() {
    echo "Installing go tools"
    GOCMD=${GOCMD:-go}
    echo "Using GOCMD=${GOCMD}"
    listpath=${1-${this_script_dir}/devtools.go.list}
    packages=$(cat ${listpath})
    for pkg in $packages; do
        echo "Installing go tool $pkg to ${PREFIX}/bin"
        GOCACHE= GOBIN=${PREFIX}/bin go install -v $pkg || exit 1
    done
    # GOCACHE= GOBIN=${PREFIX}/bin go install -v $(cat ${listpath}) || exit 1

    # type "stringer" 2>/dev/null || ${GOCMD} install -v golang.org/x/tools/cmd/stringer@latest | sed 's/^/[stringer] /'
    # # TODO remove 'go-bindata' in favor of embed.FS
    # type "go-bindata" 2>/dev/null || ${GOCMD} install -v github.com/kevinburke/go-bindata/v4/...@latest
    # type "gencodec" 2>/dev/null || ${GOCMD} install -v github.com/fjl/gencodec@latest
    # type "protoc-gen-go" 2>/dev/null || ${GOCMD} install -v google.golang.org/protobuf/cmd/protoc-gen-go@latest
    type "protoc" 2>/dev/null || echo 'Please install protoc (eg. apt install protobuf-compiler)'
    type "npm" 2>/dev/null || echo 'Consider installing node.js and npm (eg. https://github.com/nvm-sh/nvm)'
    type "solc-static-linux" 2>/dev/null || echo 'Consider installing solc (eg. contrib/install_devtools.sh solc)'
    type "solc-aqua" 2>/dev/null || echo 'Consider installing solc-aqua (eg. contrib/install_devtools.sh solc-aqua)'
    type "stringer" 2>/dev/null || (echo 'make sure you add $GOPATH/bin to your $PATH (currently is $PATH)' && exit 1)
    echo "Successfully installed go tools"
    #	${GOCMD} install gitlab.com/aquachain/x/cmd/aqua-abigen@latest # TODO: fix the x repo (it should depend on this repo)
}
install_solc() {
    test -f ${solc_bin_path} && echo "....solc already installed" && return 0
    echo "Installing solc (solidity compiler)"

    wget -c $solidity_url -O solc-static-linux
    mv solc-static-linux ${solc_bin_path}
    chmod +x ${solc_bin_path}
    hash -r
    which solc-static-linux || (echo "Failed to install solc" && exit 1)
}


install_solc_aqua() {
    set -e
    test -f ${solc_bin_path}-aqua && echo "....solc-aqua already installed" && mv ${solc_bin_path}-aqua{,.bak}
    install_solc || exit 1
    echo "Installing solc-aqua wrapper"
    # install wrapper
cat <<EOF >${PREFIX}/bin/solc-aqua
#!/bin/bash
# solc-aqua wrapper
# generated by contrib/install_devtools.sh (aquachain repo)
if [ -z "\$1" ]; then
    echo "solc-aqua is a wrapper around solc that sets the evm-version to byzantium to match the aquachain evm"
    echo "Usage: solc-aqua <solidity flags>"
    echo ""
    echo "Generated by contrib/install_devtools.sh in the aquachain repo"
    exit 1
fi
which solc-static-linux 1>/dev/null || install_solc || exit 1
if [ "\$1" == "--help" ] || [ "\$1" == "-h" ]; then
    set +e
    solc-static-linux --help
    exitcode=$?
    echo "solc-aqua is a wrapper around solc that sets the evm-version to byzantium to match the aquachain evm"
    exit $exitcode # same exit code as solc --help (0)
fi
solc-static-linux --evm-version byzantium "\${@}"
EOF
    chmod +x "${PREFIX}/bin/solc-aqua"
    echo "Successfully installed solc-aqua"
}

if [ "$1" == "all" ]; then
    echo "Installing all dev tools"
    install_go_tools || exit 1
    install_solc_aqua || exit 1
    echo "Successfully installed all dev tools"
    exit 0
fi
if [ "$1" == "solc" ]; then
    install_solc || exit 1
    echo "Successfully installed solc"
    exit 0
fi
if [ "$1" == "solc-aqua" ]; then
    install_solc_aqua || exit 1
    exit 0
fi

# default only go tools
echo Installing only go tools
install_go_tools
exitcode=$?
if [ $exitcode -ne 0 ]; then
    echo "Failed to install aquachain go tools"
    exit $exitcode
fi

echo "Successfully installed aquachain go tools"
